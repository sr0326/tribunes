<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.sr.dao.DownFileDao">
	<resultMap type="com.sr.entity.DownFile" id="getUserMap">	
		<id column="fileId" property="fileId" />
		<id column="fileName" property="fileName" />
		<id column="downtypeid" property="downtypeid" />
		<id column="filetype" property="filetype" />
		<id column="userid" property="userid" />
		<id column="uploadtime" property="uploadtime" />
		<id column="uploadtime" property="uploadtime" />
		<id column="downtime" property="downtime" />
		<id column="filesize" property="filesize" />
		<id column="need_score" property="need_score" />
		<id column="url" property="url" />
		<id column="upfilestate" property="upfilestate" />
		<association property="uindo" javaType="com.sr.entity.UserInfo">
			<id column="userId" property="userId" />
			<id column="nickname" property="nickname" />
			<id column="realName" property="realName" />
			<id column="phone" property="phone" />
			<id column="usepwd" property="usepwd" />
			<id column="sex" property="sex" />
			<id column="birthday" property="birthday" />
			<id column="curjob" property="curjob" />
			<id column="selfdesc" property="selfdesc" />
			<id column="pic" property="pic" />
			<id column="integral" property="integral" />
		</association>
	</resultMap>
	
	<resultMap type="com.sr.entity.DownFile" id="gettypeMap">	
		<id column="fileId" property="fileId" />
		<id column="fileName" property="fileName" />
		<id column="downtypeid" property="downtypeid" />
		<id column="filetype" property="filetype" />
		<id column="userid" property="userid" />
		<id column="uploadtime" property="uploadtime" />
		<id column="uploadtime" property="uploadtime" />
		<id column="downtime" property="downtime" />
		<id column="filesize" property="filesize" />
		<id column="need_score" property="need_score" />
		<id column="url" property="url" />
		<id column="upfilestate" property="upfilestate" />
		<association property="dtype" javaType="com.sr.entity.DownType">
			<id column="downtypeid" property="downtypeid" />
			<id column="downtypeName" property="downtypeName" />
		</association>
	</resultMap>
	
	<!-- public List<DownFile> queryDownFile(Integer downtypeid,String fileName,Integer fileid,Integer userid,Integer filetype,Integer upfilestate); -->
	<select id="queryDownFile" resultMap="getUserMap">
		select df.*,ui.*,df.fileDis from downfile df,userinfo ui where 
		ui.userId=df.userid
		<if test="param1 != null and param1 != ''">
			and df.downtypeid=#{param1}
		</if>
		<if test="param2 != null and param2 != ''">
			and df.fileName like concat('%',#{param2},'%')
		</if>
		<if test="param3 != null and param3 != ''">
			and df.fileId not in (#{param3})
		</if>
		<if test="param4 != null and param4 != ''">
			and df.userid=#{param4}
		</if>
		<if test="param5 != null and param5 != ''">
			and df.filetype=#{param5}
		</if>
		<if test="param6 != null and param6 != ''">
			and df.upfilestate=#{param6}
		</if>
	</select>
	
	<!-- public DownFile queryById(Integer fileid); -->
	<select id="queryById" resultMap="gettypeMap">
		select df.*,dt.*,df.fileDis from downfile df,downtype dt where
		dt.downtypeid=df.downtypeid and df.upfilestate=1 and df.fileId=#{param1}
	</select>
	
	<!-- public List<DownFile> recommend(Integer page); -->
	<select id="recommend" resultMap="getUserMap">
		select df.*,ui.* from downfile df,userinfo ui where ui.userId=df.userid
		and df.upfilestate=1 order by downtime limit 5
	</select>
	
	<!-- public List<DownFile> BynewTime(); -->
	<select id="BynewTime" resultMap="getUserMap">
		select df.*,ui.* from downfile df,userinfo ui where ui.userId=df.userid
		and df.upfilestate=1 order by uploadtime
	</select>
	
	<!-- public DownFile queryUser(Integer fileid); -->
	<select id="queryUser" resultMap="getUserMap">
		select df.*,ui.* from downfile df,userinfo ui where ui.userId=df.userid
		and df.upfilestate=1
		<if test="_parameter != null and _parameter != ''">
			and df.fileId=#{fileid}
		</if>
	</select>
	
	<!-- public List<DownFile> queryByUseridfiles(String userid,Integer fileid); -->
	<select id="queryByUseridfiles" resultMap="gettypeMap">
		select df.*,dt.* from downfile df,downtype dt where
		dt.downtypeid=df.downtypeid and df.userid=#{param1}
		and df.fileid not in (#{param2}) and df.upfilestate=1
	</select>
	
	<!-- public List<Map<String,Object>> queryPaiming(String userid); -->
	<select id="queryPaiming" resultType="Map">
		select u.userId,u.integral,u.rownum from 
		(select obj.userId,obj.integral,@rownum:=@rownum+1 as 
		num_tmp,@incrnum:=case when @rowtotal=obj.integral 
		then @incrnum when @rowtotal:=obj.integral then @rownum 
		end as rownum from (select userId,integral from userinfo 
		order by integral desc) as obj,
		(select @rownum:=0,@rowtotal:=null,@incrnum:=0) r) as u
		 where u.userId=#{uid}
	</select>
	
	<!-- public List<Map<String,Object>> downnum(String userid); -->
	<select id="downnum" resultType="Map">
		select count(downid) down from downresource 
		where userid=#{uid}
	</select>

	<!-- public List<Map<String,Object>> uploadnum(String userid); -->
	<select id="uploadnum" resultType="Map">
		select count(fileid) uploads from downfile where 
		upfilestate=1 and userid=#{uid}
	</select>
	
	<!-- public int addfile(DownFile df); -->
	<insert id="addfile" parameterType="com.sr.entity.DownFile">
		<selectKey keyColumn="fileId" keyProperty="fileId" order="BEFORE" resultType="com.sr.entity.DownFile">
			select max(fileId)+1 fileId from downfile
		</selectKey>
		insert into downfile(fileId,fileName,downtypeid,filetype,userid,uploadtime,fileDis
		,downtime,filesize,need_score,url,upfilestate) values(#{fileId},#{fileName},
		#{downtypeid},#{filetype},#{userid},now(),#{fileDis}
		,0,#{filesize},#{need_score},#{url},2)
	</insert>
	
	<!-- public List<Map<String,Object>> queryHeResour(String uid,Integer pageindex); -->
	<select id="queryHeResour" resultType="Map">
		select df.fileId,df.need_score,df.filesize,df.fileDis,
		df.uploadtime,df.userid,df.downtypeid,df.fileName,
		ui.nickname,ui.integral,ui.pic,dt.downtypeName from 
		downfile df,userinfo ui,downtype dt where df.userid=ui.userId 
		and df.downtypeid=dt.downtypeid and df.userid=#{param1} 
		and df.upfilestate=1
		<if test="param2 != null and param2 != ''">
			limit #{param2},2
		</if>
		<if test="param2 == 0">
			limit 2
		</if>
	</select>
	
	<!-- public UserInfo queryHeUser(String uid); -->
	<select id="queryHeUser" resultType="com.sr.entity.UserInfo">
		select * from userinfo where userId=#{uid}
	</select>
</mapper>
